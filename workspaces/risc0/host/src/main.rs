use rsa::{
    pkcs8::{DecodePrivateKey, DecodePublicKey},
    PaddingScheme, PublicKey, RsaPrivateKey, RsaPublicKey,
};
use sha2::{Digest, Sha256};
use std::vec;
// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{METHOD_ELF, METHOD_ID};
use risc0_zkvm::{default_prover, ExecutorEnv};
use std::io::Write;

const PROOF_FILE_PATH: &str = "../../proof_data/risc0/risc0.proof";
const IMAGE_ID_FILE_PATH: &str = "../../proof_data/risc0/risc0.imageid";
const PUBLIC_INPUT_FILE_PATH: &str = "../../proof_data/risc0/risc0_pub_input.pub";

fn main() {
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    const RSA_2048_PRIV: &[u8] = include_bytes!("rsa2048-priv.der");
    const RSA_2048_PUB: &[u8] = include_bytes!("rsa2048-pub.der");

    let message = b"Hello world!".to_vec();
    let signature: Vec<u8> = vec![
        32, 121, 247, 109, 107, 249, 210, 178, 234, 149, 136, 242, 34, 135, 250, 127, 150, 225, 43,
        137, 241, 39, 139, 78, 179, 49, 169, 111, 200, 96, 183, 227, 70, 15, 46, 227, 114, 103,
        169, 170, 57, 107, 214, 102, 222, 13, 19, 216, 241, 134, 26, 124, 96, 202, 29, 185, 69, 4,
        204, 78, 223, 61, 124, 41, 179, 255, 84, 58, 47, 137, 242, 102, 161, 37, 45, 20, 39, 129,
        67, 55, 210, 164, 105, 82, 214, 223, 194, 201, 143, 114, 99, 237, 157, 42, 73, 50, 175,
        160, 145, 95, 138, 242, 157, 90, 100, 170, 206, 39, 80, 49, 65, 55, 202, 214, 17, 19, 183,
        244, 184, 17, 108, 171, 54, 178, 242, 137, 215, 67, 185, 198, 122, 234, 132, 240, 73, 42,
        123, 46, 201, 19, 197, 248, 9, 122, 16, 86, 67, 250, 237, 245, 43, 199, 65, 62, 153, 160,
        44, 108, 21, 125, 197, 154, 231, 115, 225, 38, 238, 229, 143, 203, 159, 65, 147, 18, 9,
        224, 14, 43, 58, 16, 7, 148, 2, 187, 97, 95, 70, 174, 68, 149, 7, 79, 223, 124, 207, 57,
        214, 242, 126, 2, 7, 3, 198, 202, 26, 136, 237, 106, 205, 11, 227, 120, 162, 104, 22, 167,
        192, 124, 239, 39, 201, 157, 45, 85, 147, 247, 1, 240, 217, 220, 218, 79, 238, 135, 100,
        22, 44, 88, 95, 9, 64, 224, 101, 57, 54, 171, 218, 6, 160, 137, 97, 114, 90, 32, 47, 184,
    ];

    let private_key = RsaPrivateKey::from_pkcs8_der(RSA_2048_PRIV).unwrap();
    let public_key = RsaPublicKey::from_public_key_der(RSA_2048_PUB).unwrap();
    println!("{:?} \n\n{:?}", private_key, public_key);


    let env = ExecutorEnv::builder().write(&RSA_2048_PUB).unwrap().write(&message).unwrap().write(&signature).unwrap().build().unwrap();

    // Obtain the default prover.
    let prover = default_prover();

    // Produce a receipt by proving the specified ELF binary.
    let receipt = prover.prove(env, METHOD_ELF).unwrap().receipt;

    let verification_result = receipt.verify(METHOD_ID).is_ok();

    println!("Verification result: {}", verification_result);

    

    let serialized = bincode::serialize(&receipt).unwrap();

    std::fs::create_dir_all("../../proof_data/risc0").expect("Failed to create proof_data/sp1");
    let mut proof_file =
        std::fs::File::create(PROOF_FILE_PATH).expect("Failed to create SP1 elf file");
    let mut image_id_file =
        std::fs::File::create(IMAGE_ID_FILE_PATH).expect("Failed to create SP1 elf file");
    let mut public_input_file =
        std::fs::File::create(PUBLIC_INPUT_FILE_PATH).expect("Failed to create SP1 elf file");
    proof_file
        .write_all(&serialized)
        .expect("Failed write Risc0 proof to file");
    image_id_file
        .write_all(&convert(&METHOD_ID))
        .expect("Failed write Risc0 image id to file");
    public_input_file
        .write_all(&receipt.journal.bytes)
        .expect("Failed write Risc0 image id to file");
}

pub fn convert(data: &[u32; 8]) -> [u8; 32] {
    let mut res = [0; 32];
    for i in 0..8 {
        res[4 * i..4 * (i + 1)].copy_from_slice(&data[i].to_le_bytes());
    }
    res
}
